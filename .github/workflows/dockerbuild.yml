name: Docker Build & Push (Multi-Service)

on:
  workflow_call:
    inputs:
      build_args:
        description: 'Optional Docker build arguments in format key=value,key=value'
        type: string
        required: false
      platforms:
        description: 'Target platforms (comma-separated, e.g. linux/amd64,linux/arm64)'
        type: string
        required: false
        default: linux/amd64,linux/arm64

jobs:
  setup-context:
    uses: eclipse-xfsc/dev-ops/.github/workflows/build-context.yml@main
    secrets: inherit

  docker-build:
    needs: setup-context
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Read Harbor Config
        run: |
            CONFIG_FILE="deployment/harbor.config"
            while IFS='=' read -r key value; do
              case "$key" in
                PROJECT)
                  export HARBOR_PROJECT="$value"
                  ;;
                USER)
                  RAW_USER="$value"  # Merken ohne robot$
                  export HARBOR_USERNAME="robot\$${value}"  # Setze mit robot$ Pr√§fix
                  ;;
              esac
            done < "$CONFIG_FILE"
            
            if [[ -z "$HARBOR_CREDENTIALS" ]]; then
              echo "Fehler: HARBOR_CREDENTIALS ist nicht gesetzt."
              exit 1
            fi
            
            DECODED_JSON=$(echo "$HARBOR_CREDENTIALS" | base64 -d)
            
            HARBOR_PASSWORD=$(echo "$DECODED_JSON" | jq -r --arg user "$RAW_USER" '.[$user]')
            
            # Fehlerbehandlung: Falls Passwort leer oder null ist
            if [[ -z "$HARBOR_PASSWORD" || "$HARBOR_PASSWORD" == "null" ]]; then
              echo "Fehler: Kein Passwort f√ºr Benutzer $RAW_USER gefunden."
              exit 1
            fi

      - name: Docker login to Harbor
        run: |
          echo "${{ secrets.HARBOR_PASSWORD }}" | docker login "${{ secrets.HARBOR_OCI }}" \
            --username "${{ secrets.HARBOR_USERNAME }}" \
            --password-stdin

      - name: Find and build Docker images (multi-arch)
        run: |
          IMAGE_TAG="${{ needs.setup-context.outputs.image_tag }}"
          PLATFORMS="${{ inputs.platforms }}"
          echo "üîñ Tag: $IMAGE_TAG"
          echo "üß¨ Platforms: $PLATFORMS"

          # Convert comma-separated build_args string to space-separated --build-arg args
          BUILD_ARGS=""
          if [[ -n "${{ inputs.build_args }}" ]]; then
            IFS=',' read -ra ARGS <<< "${{ inputs.build_args }}"
            for arg in "${ARGS[@]}"; do
              BUILD_ARGS+="--build-arg $arg "
            done
          fi

          find . -type f -path "*/deployment/docker/Dockerfile" | while read dockerfile; do
            SERVICE_DIR=$(dirname "$(dirname "$dockerfile")")
            SERVICE_NAME=$(basename "$SERVICE_DIR")
            IMAGE="${{ secrets.HARBOR_OCI }}/${{ secrets.HARBOR_PROJECT }}/$SERVICE_NAME:$IMAGE_TAG"

            echo "üê≥ Building $SERVICE_NAME ‚Üí $IMAGE"

            docker buildx build \
              --platform "$PLATFORMS" \
              --file "$dockerfile" \
              $BUILD_ARGS \
              --push \
              --tag "$IMAGE" \
              "$SERVICE_DIR"
          done
