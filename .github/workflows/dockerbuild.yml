name: Docker Build & Push (Multi-Service)

on:
  workflow_call:
    inputs:
      build_args:
        description: 'Optional Docker build arguments in format key=value,key=value'
        type: string
        required: false
      platforms:
        description: 'Target platforms (comma-separated, e.g. linux/amd64,linux/arm64)'
        type: string
        required: false
        default: linux/amd64,linux/arm64
      harbor_config:
        description: 'path to harbor config'
        type: string
        default: "deployment/harbor.config"
        required: false
      dockerfile:
        description: 'path to dockerfile'
        type: string
        default: "deployment/docker/Dockerfile"
        required: false
      service:
        description: 'path for build'
        type: string
        default: "."
        required: false
      buildContext:
        description: 'path for build'
        type: string
        default: "."
        required: false

jobs:
  setup-context:
    uses: eclipse-xfsc/dev-ops/.github/workflows/build-context.yml@main
    secrets: inherit
  docker-build:
    needs: setup-context
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Read Harbor Config
        id: harbor
        env:
          HARBOR_CREDENTIALS: ${{ secrets.HARBOR_CREDENTIALS}}
          HARBOR_HOST: ${{ secrets.HARBOR_HOST}}
        run: |
            CONFIG_FILE=${{ inputs.harbor_config }}
            while IFS='=' read -r key value; do
              case "$key" in
                PROJECT)
                  export HARBOR_PROJECT="$value"
                  ;;
                USER)
                  RAW_USER="$value"  # Merken ohne robot$
                  export HARBOR_USERNAME="robot\$${value}" 
                  ;;
              esac
            done < "$CONFIG_FILE"
            
            if [[ -z "$HARBOR_CREDENTIALS" ]]; then
              echo "Fehler: HARBOR_CREDENTIALS ist nicht gesetzt."
              exit 1
            fi
            
            DECODED_JSON=$(echo "$HARBOR_CREDENTIALS" | base64 -d)
            
            HARBOR_PASSWORD=$(echo "$DECODED_JSON" | jq -r --arg user "$RAW_USER" '.[$user]')
            
            # Fehlerbehandlung: Falls Passwort leer oder null ist
            if [[ -z "$HARBOR_PASSWORD" || "$HARBOR_PASSWORD" == "null" ]]; then
              echo "Fehler: Kein Passwort für Benutzer $RAW_USER gefunden."
              exit 1
            fi

            echo "HARBOR_PROJECT=$HARBOR_PROJECT" >> $GITHUB_ENV
            echo "HARBOR_USERNAME=$HARBOR_USERNAME" >> $GITHUB_ENV
            echo "HARBOR_PASSWORD=$HARBOR_PASSWORD" >> $GITHUB_ENV

      - name: Docker Login
        run: |
            echo "$HARBOR_PASSWORD" | docker login "$HARBOR_HOST" --username "$HARBOR_USERNAME" --password-stdin

      - name: Find and build Docker images (multi-arch)
        run: |
          IMAGE_TAG="${{ needs.setup-context.outputs.image_tag }}"
          PLATFORMS="${{ inputs.platforms }}"
          echo "🔖 Tag: $IMAGE_TAG"
          echo "🧬 Platforms: $PLATFORMS"

          # Convert comma-separated build_args string to space-separated --build-arg args
          BUILD_ARGS=""
          if [[ -n "${{ inputs.build_args }}" ]]; then
            IFS=',' read -ra ARGS <<< "${{ inputs.build_args }}"
            for arg in "${ARGS[@]}"; do
              BUILD_ARGS+="--build-arg $arg "
            done
          fi
        
          REPO_NAME=$(basename "$GITHUB_REPOSITORY")
          SERVICE_NAME="${{ inputs.service }}"
          
          if [[ "$SERVICE_NAME" == "." ]]; then
            FINAL_NAME="$REPO_NAME"
          else
            FINAL_NAME="$REPO_NAME/$SERVICE_NAME"
          fi

          IMAGE="$HARBOR_HOST/$HARBOR_PROJECT/$FINAL_NAME:$IMAGE_TAG"

          echo "🐳 Building $FINAL_NAME → $IMAGE"

          docker buildx build \
            --platform "$PLATFORMS" \
            --file ${{ inputs.dockerfile}} \
            $BUILD_ARGS \
            --push \
            --tag "$IMAGE" \
            ${{ inputs.buildContext }}

          docker push "$IMAGE"

